diff --git a/.gitignore b/.gitignore
index 79d8f65..dbbfe62 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,5 +6,5 @@
 *.dwarf
 /.crystal-version
 /.env*
-/shard.lock
+/*.lock
 /start_server
diff --git a/Procfile b/Procfile
index afafdcf..4acd03d 100644
--- a/Procfile
+++ b/Procfile
@@ -1,2 +1,2 @@
-web: ./app
+web: ./bin/app
 release: lucky db.migrate
diff --git a/config/app.cr b/config/app.cr
index 4e1b282..2e314f9 100644
--- a/config/app.cr
+++ b/config/app.cr
@@ -17,7 +17,5 @@ App.configure do |settings|
   settings.email_reply_to = ENV["EMAIL_REPLY_TO"]
 
   settings.make_first_user_admin = Bool.adapter
-    .parse(ENV["MAKE_FIRST_USER_ADMIN"])
-    .value
-    .not_nil!
+    .parse!(ENV["MAKE_FIRST_USER_ADMIN"])
 end
diff --git a/config/log.cr b/config/log.cr
index f46ce25..c5951fe 100644
--- a/config/log.cr
+++ b/config/log.cr
@@ -20,6 +20,7 @@ else
   backend = Log::IOBackend.new
   backend.formatter = Lucky::PrettyLogFormatter.proc
   Log.dexter.configure(:debug, backend)
+  DB::Log.level = :info
 end
 
 # Lucky only logs when before/after pipes halt by redirecting, or rendering a
diff --git a/config/server.cr b/config/server.cr
index 61a449f..58e3e97 100644
--- a/config/server.cr
+++ b/config/server.cr
@@ -8,9 +8,7 @@ Lucky::Server.configure do |settings|
     settings.host = ENV["SERVER_HOST"]
     settings.port = ENV["SERVER_PORT"].to_i
 
-    settings.gzip_enabled = Bool.adapter
-      .parse(ENV["GZIP_ENABLED"])
-      .value.not_nil!
+    settings.gzip_enabled = Bool.adapter.parse!(ENV["GZIP_ENABLED"])
 
     # By default certain content types will be gzipped.
     # For a full list look in
@@ -32,7 +30,7 @@ Lucky::ForceSSLHandler.configure do |settings|
   #
   #    settings.enabled = Lucky::Env.production?
   #    settings.strict_transport_security = {max_age: 1.year, include_subdomains: true}
-  settings.enabled = Bool.adapter.parse(ENV["SSL_ENABLED"]).value.not_nil!
+  settings.enabled = Bool.adapter.parse!(ENV["SSL_ENABLED"])
 end
 
 private def secret_key_from_env
diff --git a/config/shield.cr b/config/shield.cr
index 4b0aaa9..cb54a9a 100644
--- a/config/shield.cr
+++ b/config/shield.cr
@@ -16,20 +16,16 @@ Shield.configure do |settings|
   settings.password_min_length = ENV["PASSWORD_MIN_LENGTH"].to_i
 
   settings.password_require_lowercase = Bool.adapter
-    .parse(ENV["PASSWORD_REQUIRE_LOWERCASE"])
-    .value.not_nil!
+    .parse!(ENV["PASSWORD_REQUIRE_LOWERCASE"])
 
   settings.password_require_uppercase = Bool.adapter
-    .parse(ENV["PASSWORD_REQUIRE_UPPERCASE"])
-    .value.not_nil!
+    .parse!(ENV["PASSWORD_REQUIRE_UPPERCASE"])
 
   settings.password_require_number = Bool.adapter
-    .parse(ENV["PASSWORD_REQUIRE_NUMBER"])
-    .value.not_nil!
+    .parse!(ENV["PASSWORD_REQUIRE_NUMBER"])
 
   settings.password_require_special_char = Bool.adapter
-    .parse(ENV["PASSWORD_REQUIRE_SPECIAL_CHAR"])
-    .value.not_nil!
+    .parse!(ENV["PASSWORD_REQUIRE_SPECIAL_CHAR"])
 
   settings.password_reset_expiry = Time::Span.new(
     seconds: ENV["PASSWORD_RESET_EXPIRY"].to_i
diff --git a/db/migrations/20200905163024_create_user_options.cr b/db/migrations/20200905163024_create_user_options.cr
index 2b71246..080ffda 100644
--- a/db/migrations/20200905163024_create_user_options.cr
+++ b/db/migrations/20200905163024_create_user_options.cr
@@ -4,17 +4,11 @@ class CreateUserOptions::V20200905163024 < Avram::Migrator::Migration::V1
       primary_key id : Int64
 
       add_timestamps
-      add_belongs_to user : User, on_delete: :cascade
+      add_belongs_to user : User, on_delete: :cascade, unique: true
 
       add login_notify : Bool
       add password_notify : Bool
     end
-
-    # This sets a "UNIQUE" constraint on the foreign key (user_id)
-    execute <<-SQL
-    ALTER TABLE #{table_for(UserOptions)} ADD CONSTRAINT
-    #{table_for(UserOptions)}_user_id_unique UNIQUE (user_id);
-    SQL
   end
 
   def rollback
diff --git a/db/migrations/20210208231305_make_email_columns_case_insensitive.cr b/db/migrations/20210208231305_make_email_columns_case_insensitive.cr
new file mode 100644
index 0000000..e2c552f
--- /dev/null
+++ b/db/migrations/20210208231305_make_email_columns_case_insensitive.cr
@@ -0,0 +1,23 @@
+class MakeEmailColumnsCaseInsensitive::V20210208231305 < Avram::Migrator::Migration::V1
+  def migrate
+    enable_extension "citext"
+
+    alter table_for(User) do
+      change_type email : String, case_sensitive: false
+    end
+
+    alter table_for(EmailConfirmation) do
+      change_type email : String, case_sensitive: false
+    end
+  end
+
+  def rollback
+    alter table_for(User) do
+      change_type email : String, case_sensitive: true
+    end
+
+    alter table_for(EmailConfirmation) do
+      change_type email : String, case_sensitive: true
+    end
+  end
+end
diff --git a/db/migrations/20210210123800_add_bearer_login_notify_to_user_options.cr b/db/migrations/20210210123800_add_bearer_login_notify_to_user_options.cr
new file mode 100644
index 0000000..6cb6c94
--- /dev/null
+++ b/db/migrations/20210210123800_add_bearer_login_notify_to_user_options.cr
@@ -0,0 +1,13 @@
+class AddBearerLoginNotifyToUserOptions::V20210210123800 < Avram::Migrator::Migration::V1
+  def migrate
+    alter table_for(UserOptions) do
+      add bearer_login_notify : Bool, fill_existing_with: false
+    end
+  end
+
+  def rollback
+    alter table_for(UserOptions) do
+      remove :bearer_login_notify
+    end
+  end
+end
diff --git a/docker-compose.yml b/docker-compose.yml
index b6d2f9a..f43af34 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -1,9 +1,9 @@
 services:
-  crystal: &crystal
+  app: &crystal
     depends_on:
-      - postgres
+      - db
     environment:
-      DATABASE_HOST: postgres
+      DATABASE_HOST: db
       DATABASE_NAME: app_spec
       DATABASE_PASSWORD: password
       DATABASE_PORT: "5432"
@@ -11,16 +11,16 @@ services:
       SERVER_HOST: "0.0.0.0"
       SERVER_PORT: "5000"
       SKIP_CREATE_DB: "true"
-    image: crystallang/crystal:0.35.1-alpine
+    image: crystallang/crystal:0.36.1-alpine
     volumes:
       - .:/var/www/html
     working_dir: /var/www/html
-  postgres:
+  db:
     environment:
       POSTGRES_DB: app_spec
       POSTGRES_PASSWORD: password
       POSTGRES_USER: username
-    image: postgres:12.4-alpine
+    image: postgres:12.5-alpine
   shards:
     <<: *crystal
     command: 'sh -c "shards update"'
diff --git a/package.json b/package.json
index 0bdde89..4cc92c5 100644
--- a/package.json
+++ b/package.json
@@ -1,4 +1,5 @@
 {
+  "license": "UNLICENSED",
   "private": true,
   "dependencies": {
     "@rails/ujs": "^6.0.0",
@@ -7,18 +8,18 @@
   },
   "scripts": {
     "heroku-postbuild": "yarn prod",
-    "dev": "yarn run webpack --progress --hide-modules --color --config=node_modules/laravel-mix/setup/webpack.config.js",
-    "watch": "yarn run webpack --watch --hide-modules --color --config=node_modules/laravel-mix/setup/webpack.config.js",
-    "prod": "NODE_ENV=production yarn run webpack --progress --hide-modules --color --config=node_modules/laravel-mix/setup/webpack.config.js"
+    "dev": "mix",
+    "watch": "mix watch",
+    "prod": "mix --production"
   },
   "devDependencies": {
     "@babel/compat-data": "^7.9.0",
     "browser-sync": "^2.26.7",
-    "compression-webpack-plugin": "^6.0.1",
-    "laravel-mix": "^5.0.5",
+    "compression-webpack-plugin": "^7.0.0",
+    "laravel-mix": "^6.0.0",
+    "postcss": "^8.1.0",
     "resolve-url-loader": "^3.1.1",
-    "sass": "^3.1.1",
-    "sass-loader": "^10.0.2",
-    "vue-template-compiler": "^2.6.12"
+    "sass": "^1.26.10",
+    "sass-loader": "^10.0.2"
   }
 }
diff --git a/shard.yml b/shard.yml
index 3720e95..ad57925 100644
--- a/shard.yml
+++ b/shard.yml
@@ -4,13 +4,13 @@ description: Get up and running with Lucky framework and Shield
 
 authors:
   - GrottoPress <info@grottopress.com>
-  - N Atta Kusi Adusei <attakusiadusei@gmail.com>
+  - N Atta Kusi Adusei
 
 targets:
   app:
     main: src/start_server.cr
 
-crystal: 0.35.1
+crystal: ~> 0.36.0
 
 dependencies:
   # annotation:
@@ -18,7 +18,7 @@ dependencies:
   #   version: ~> 0.4.0
   lucky:
     github: luckyframework/lucky
-    version: ~> 0.25.0
+    version: ~> 0.26.0
   carbon:
     github: luckyframework/carbon
     version: ~> 0.1.0
@@ -27,12 +27,12 @@ dependencies:
     version: ~> 0.2.0
   shield:
     github: GrottoPress/shield
-    version: ~> 0.7.0
+    version: ~> 0.8.0
 
 development_dependencies:
   # ameba:
   #   github: veelenga/ameba
-  #   version: ~> 0.12.0
+  #   version: ~> 0.13.0
   lucky_flow:
     github: luckyframework/lucky_flow
     version: ~> 0.7.0
diff --git a/spec/setup/configure_lucky_flow.cr b/spec/setup/configure_lucky_flow.cr
index dc91c5f..6b14f50 100644
--- a/spec/setup/configure_lucky_flow.cr
+++ b/spec/setup/configure_lucky_flow.cr
@@ -1,6 +1,7 @@
 LuckyFlow.configure do |settings|
   settings.stop_retrying_after = 200.milliseconds
   settings.base_uri = Lucky::RouteHelper.settings.base_uri
+  settings.driver = LuckyFlow::Drivers::Chrome
 end
 
 Spec.before_each { LuckyFlow::Server::INSTANCE.reset }
diff --git a/spec/support/boxes/bearer_login_box.cr b/spec/support/factories/bearer_login_factory.cr
similarity index 75%
rename from spec/support/boxes/bearer_login_box.cr
rename to spec/support/factories/bearer_login_factory.cr
index 75c7032..73a8149 100644
--- a/spec/support/boxes/bearer_login_box.cr
+++ b/spec/support/factories/bearer_login_factory.cr
@@ -1,4 +1,4 @@
-class BearerLoginBox < Avram::Box
+class BearerLoginFactory < Avram::Factory
   def initialize
     set_defaults
   end
@@ -11,6 +11,6 @@ class BearerLoginBox < Avram::Box
     name "super secret"
     scopes ["api.current_user.create"]
     active_at Time.utc
-    token "123.abcdefghijklmnopqrst"
+    token "123abcdefghijklmnopqrst"
   end
 end
diff --git a/spec/support/boxes/email_confirmation_box.cr b/spec/support/factories/email_confirmation_factory.cr
similarity index 73%
rename from spec/support/boxes/email_confirmation_box.cr
rename to spec/support/factories/email_confirmation_factory.cr
index 9359e01..91b1b0a 100644
--- a/spec/support/boxes/email_confirmation_box.cr
+++ b/spec/support/factories/email_confirmation_factory.cr
@@ -1,4 +1,4 @@
-class EmailConfirmationBox < Avram::Box
+class EmailConfirmationFactory < Avram::Factory
   def initialize
     set_defaults
   end
@@ -11,6 +11,6 @@ class EmailConfirmationBox < Avram::Box
     email "user@example.tld"
     ip_address "1.2.3.4"
     active_at Time.utc
-    token "123.abcdefghijklmnopqrst"
+    token "123abcdefghijklmnopqrst"
   end
 end
diff --git a/spec/support/boxes/login_box.cr b/spec/support/factories/login_factory.cr
similarity index 74%
rename from spec/support/boxes/login_box.cr
rename to spec/support/factories/login_factory.cr
index 0249101..dbf6439 100644
--- a/spec/support/boxes/login_box.cr
+++ b/spec/support/factories/login_factory.cr
@@ -1,4 +1,4 @@
-class LoginBox < Avram::Box
+class LoginFactory < Avram::Factory
   def initialize
     set_defaults
   end
@@ -10,6 +10,6 @@ class LoginBox < Avram::Box
   private def set_defaults
     ip_address "1.2.3.4"
     active_at Time.utc
-    token "123.abcdefghijklmnopqrst"
+    token "123abcdefghijklmnopqrst"
   end
 end
diff --git a/spec/support/boxes/password_reset_box.cr b/spec/support/factories/password_reset_factory.cr
similarity index 71%
rename from spec/support/boxes/password_reset_box.cr
rename to spec/support/factories/password_reset_factory.cr
index a1cd85c..f74a5ef 100644
--- a/spec/support/boxes/password_reset_box.cr
+++ b/spec/support/factories/password_reset_factory.cr
@@ -1,4 +1,4 @@
-class PasswordResetBox < Avram::Box
+class PasswordResetFactory < Avram::Factory
   def initialize
     set_defaults
   end
@@ -10,6 +10,6 @@ class PasswordResetBox < Avram::Box
   private def set_defaults
     ip_address "1.2.3.4"
     active_at Time.utc
-    token "123.abcdefghijklmnopqrst"
+    token "123abcdefghijklmnopqrst"
   end
 end
diff --git a/spec/support/boxes/user_box.cr b/spec/support/factories/user_factory.cr
similarity index 88%
rename from spec/support/boxes/user_box.cr
rename to spec/support/factories/user_factory.cr
index 68293bf..491da9d 100644
--- a/spec/support/boxes/user_box.cr
+++ b/spec/support/factories/user_factory.cr
@@ -1,4 +1,4 @@
-class UserBox < Avram::Box
+class UserFactory < Avram::Factory
   def initialize
     set_defaults
   end
diff --git a/spec/support/boxes/user_options_box.cr b/spec/support/factories/user_options_factory.cr
similarity index 74%
rename from spec/support/boxes/user_options_box.cr
rename to spec/support/factories/user_options_factory.cr
index 7b04235..07fbfe9 100644
--- a/spec/support/boxes/user_options_box.cr
+++ b/spec/support/factories/user_options_factory.cr
@@ -1,4 +1,4 @@
-class UserOptionsBox < Avram::Box
+class UserOptionsFactory < Avram::Factory
   def initialize
     set_defaults
   end
diff --git a/spec/support/flows/log_user_in_flow.cr b/spec/support/flows/log_user_in_flow.cr
index ff4da34..a2f5f31 100644
--- a/spec/support/flows/log_user_in_flow.cr
+++ b/spec/support/flows/log_user_in_flow.cr
@@ -8,7 +8,7 @@ class LogUserInFlow < BaseFlow
       email: "user@example.tld",
       password: "passwo)rdA1passw8d*hgh"
 
-    click ".login-button"
+    click "@login-button"
   end
 
   def login_should_be_successful
diff --git a/src/actions/api_action.cr b/src/actions/api_action.cr
index a431a26..027b148 100644
--- a/src/actions/api_action.cr
+++ b/src/actions/api_action.cr
@@ -1,16 +1,4 @@
 abstract class ApiAction < Lucky::Action
-  include Shield::ApiAction
-
-  include Shield::Api::LoginHelpers
-  include Shield::Api::AuthorizationHelpers
-  include Shield::Api::PasswordResetHelpers
-  include Shield::Api::EmailConfirmationHelpers
-
-  include Shield::Api::LoginPipes
-  include Shield::Api::AuthorizationPipes
-  include Shield::Api::PasswordResetPipes
-  include Shield::Api::EmailConfirmationPipes
-
   skip :pin_login_to_ip_address
 
   accepted_formats [:html, :json], default: :json
diff --git a/src/actions/browser_action.cr b/src/actions/browser_action.cr
index b0c63c0..636e5a1 100644
--- a/src/actions/browser_action.cr
+++ b/src/actions/browser_action.cr
@@ -1,16 +1,4 @@
 abstract class BrowserAction < Lucky::Action
-  include Shield::BrowserAction
-
-  include Shield::LoginHelpers
-  include Shield::AuthorizationHelpers
-  include Shield::PasswordResetHelpers
-  include Shield::EmailConfirmationHelpers
-
-  include Shield::LoginPipes
-  include Shield::AuthorizationPipes
-  include Shield::PasswordResetPipes
-  include Shield::EmailConfirmationPipes
-
   include Lucky::SecureHeaders::SetFrameGuard
   include Lucky::SecureHeaders::SetSniffGuard
   include Lucky::SecureHeaders::SetXSSGuard
diff --git a/src/emails/bearer_login_notification_email.cr b/src/emails/bearer_login_notification_email.cr
new file mode 100644
index 0000000..b8c344c
--- /dev/null
+++ b/src/emails/bearer_login_notification_email.cr
@@ -0,0 +1,37 @@
+class BearerLoginNotificationEmail < BaseEmail
+  def initialize(@operation : CreateBearerLogin, @bearer_login : BearerLogin)
+  end
+
+  header "Reply-To", App.settings.email_reply_to
+
+  private def receiver
+    @bearer_login.user!
+  end
+
+  private def heading
+    "New bearer login token created"
+  end
+
+  private def text_message : String
+    <<-TEXT
+    Hi #{@bearer_login.user!.first_name},
+
+    This is to let you know that a new bearer login token was created for your
+    #{App.settings.name} account.
+
+    =====
+    Date: #{@bearer_login.active_at.to_s(date_time_format)}
+    =====
+
+    If you did not log in yourself, let us know immediately in your reply
+    to this message. Otherwise, you may safely ignore this email.
+
+    Regards,
+    #{App.settings.name}.
+    TEXT
+  end
+
+  private def date_time_format
+    "#{App.settings.date_format}, #{App.settings.time_format}"
+  end
+end
diff --git a/src/models/bearer_login.cr b/src/models/bearer_login.cr
index 73e3aea..9500f87 100644
--- a/src/models/bearer_login.cr
+++ b/src/models/bearer_login.cr
@@ -1,5 +1,8 @@
 class BearerLogin < BaseModel
   include Shield::BearerLogin
 
+  skip_default_columns
+  primary_key id : Int64
+
   table :bearer_logins {}
 end
diff --git a/src/models/email_confirmation.cr b/src/models/email_confirmation.cr
index 6bc33ca..c439c7d 100644
--- a/src/models/email_confirmation.cr
+++ b/src/models/email_confirmation.cr
@@ -1,5 +1,8 @@
 class EmailConfirmation < BaseModel
   include Shield::EmailConfirmation
 
+  skip_default_columns
+  primary_key id : Int64
+
   table :email_confirmations {}
 end
diff --git a/src/models/login.cr b/src/models/login.cr
index d955f13..776874c 100644
--- a/src/models/login.cr
+++ b/src/models/login.cr
@@ -1,5 +1,8 @@
 class Login < BaseModel
   include Shield::Login
 
+  skip_default_columns
+  primary_key id : Int64
+
   table :logins {}
 end
diff --git a/src/models/password_reset.cr b/src/models/password_reset.cr
index bc90b26..6d8c462 100644
--- a/src/models/password_reset.cr
+++ b/src/models/password_reset.cr
@@ -1,5 +1,8 @@
 class PasswordReset < BaseModel
   include Shield::PasswordReset
 
+  skip_default_columns
+  primary_key id : Int64
+
   table :password_resets {}
 end
diff --git a/src/models/user_options.cr b/src/models/user_options.cr
index 92fae6f..9dcd4d5 100644
--- a/src/models/user_options.cr
+++ b/src/models/user_options.cr
@@ -1,5 +1,7 @@
 class UserOptions < BaseModel
   include Shield::UserOptions
+  include Shield::LoginUserOptionsColumns
+  include Shield::BearerLoginUserOptionsColumns
 
   table :user_options {}
 end
diff --git a/src/pages/current_login/new_page.cr b/src/pages/current_login/new_page.cr
index 00a3984..792fe8c 100644
--- a/src/pages/current_login/new_page.cr
+++ b/src/pages/current_login/new_page.cr
@@ -26,7 +26,7 @@ class CurrentLogin::NewPage < AuthLayout
       end
 
       para do
-        button "Log in", role: "submit"
+        button "Log in", role: "submit", flow_id: "login-button"
       end
     end
   end
diff --git a/src/pages/current_user/edit_page.cr b/src/pages/current_user/edit_page.cr
index b3cffa8..89c4ed5 100644
--- a/src/pages/current_user/edit_page.cr
+++ b/src/pages/current_user/edit_page.cr
@@ -27,6 +27,14 @@ class CurrentUser::EditPage < MainLayout
         mount Shared::Field, operation.last_name
       end
 
+      para do
+        mount Shared::Field,
+          operation.save_user_options.bearer_login_notify,
+          label_text: bearer_login_notify_label_text do |builder|
+          builder.checkbox
+        end
+      end
+
       para do
         mount Shared::Field,
           operation.save_user_options.login_notify,
@@ -53,6 +61,10 @@ class CurrentUser::EditPage < MainLayout
     end
   end
 
+  private def bearer_login_notify_label_text
+    label_text = "Send me an email whenever I create a new bearer login"
+  end
+
   private def login_notify_label_text
     label_text = "Send me an email whenever my account is accessed"
   end
diff --git a/src/pages/current_user/new_page.cr b/src/pages/current_user/new_page.cr
index 2aa6d1c..708a9ed 100644
--- a/src/pages/current_user/new_page.cr
+++ b/src/pages/current_user/new_page.cr
@@ -34,6 +34,14 @@ class CurrentUser::NewPage < AuthLayout
         mount Shared::Field, operation.last_name
       end
 
+      para do
+        mount Shared::Field,
+          operation.save_user_options.bearer_login_notify,
+          label_text: bearer_login_notify_label_text do |builder|
+          builder.checkbox
+        end
+      end
+
       para do
         mount Shared::Field,
           operation.save_user_options.login_notify,
@@ -62,6 +70,10 @@ class CurrentUser::NewPage < AuthLayout
     end
   end
 
+  private def bearer_login_notify_label_text
+    label_text = "Send me an email whenever I create a bearer login"
+  end
+
   private def login_notify_label_text
     label_text = "Send me an email whenever my account is accessed"
   end
diff --git a/src/pages/users/edit_page.cr b/src/pages/users/edit_page.cr
index 5b03088..2431ae0 100644
--- a/src/pages/users/edit_page.cr
+++ b/src/pages/users/edit_page.cr
@@ -38,6 +38,14 @@ class Users::EditPage < MainLayout
         end
       end
 
+      para do
+        mount Shared::Field,
+          operation.save_user_options.bearer_login_notify,
+          label_text: bearer_login_notify_label_text do |builder|
+          builder.checkbox
+        end
+      end
+
       para do
         mount Shared::Field,
           operation.save_user_options.login_notify,
@@ -60,6 +68,10 @@ class Users::EditPage < MainLayout
     end
   end
 
+  private def bearer_login_notify_label_text
+    label_text = "Send user an email whenever they create a bearer login"
+  end
+
   private def login_notify_label_text
     label_text = "Send user an email whenever their account is accessed"
   end
diff --git a/src/start_server.cr b/src/start_server.cr
index 34d87fb..9b59488 100644
--- a/src/start_server.cr
+++ b/src/start_server.cr
@@ -9,8 +9,6 @@ end
 
 app_server = AppServer.new
 
-{Signal::INT, Signal::TERM}.each &.trap do
-  app_server.close
-end
+{Signal::INT, Signal::TERM}.each &.trap { app_server.close }
 
 app_server.listen
diff --git a/tasks.cr b/tasks.cr
index f90d036..288b151 100644
--- a/tasks.cr
+++ b/tasks.cr
@@ -13,7 +13,7 @@ require "./src/app"
 require "./tasks/**"
 
 # Load migrations
-require "./db/migrations/**"
+# require "./db/migrations/**"
 
 # Load Lucky tasks (dev, routes, etc.)
 require "lucky/tasks/**"
diff --git a/tasks/db/seed/required_data.cr b/tasks/db/seed/required_data.cr
index 7408b84..bbf463a 100644
--- a/tasks/db/seed/required_data.cr
+++ b/tasks/db/seed/required_data.cr
@@ -1,4 +1,4 @@
-require "../../../spec/support/boxes/**"
+require "../../../spec/support/factories/**"
 
 # Add seeds here that are *required* for your app to work.
 # For example, you might need at least one admin user or you might need at least
@@ -10,10 +10,10 @@ class Db::Seed::RequiredData < LuckyCli::Task
   summary "Add database records required for the app to work"
 
   def call
-    # Using a Avram::Box:
+    # Using a Avram::Factory:
     #
     # Use the defaults, but override just the email
-    # UserBox.create &.email("me@example.com")
+    # UserFactory.create &.email("me@example.com")
 
     # Using a SaveOperation:
     #
diff --git a/tasks/db/seed/sample_data.cr b/tasks/db/seed/sample_data.cr
index aa2a50f..c0abea7 100644
--- a/tasks/db/seed/sample_data.cr
+++ b/tasks/db/seed/sample_data.cr
@@ -1,4 +1,4 @@
-require "../../../spec/support/boxes/**"
+require "../../../spec/support/factories/**"
 
 # Add sample data helpful for development, e.g. (fake users, blog posts, etc.)
 #
@@ -8,10 +8,10 @@ class Db::Seed::SampleData < LuckyCli::Task
   summary "Add sample database records helpful for development"
 
   def call
-    # Using a Avram::Box:
+    # Using a Avram::Factory:
     #
     # Use the defaults, but override just the email
-    # UserBox.create &.email("me@example.com")
+    # UserFactory.create &.email("me@example.com")
 
     # Using a SaveOperation:
     #
diff --git a/webpack.mix.js b/webpack.mix.js
index 2bea5cf..0c3ecc9 100644
--- a/webpack.mix.js
+++ b/webpack.mix.js
@@ -40,13 +40,15 @@ if (mix.inProduction()) {
 }
 
 mix
+  // Set public path so manifest gets output here
+  .setPublicPath("public")
   // JS entry file. Supports Vue, and uses Babel
   //
   // More info and options (like React support) here:
   // https://github.com/JeffreyWay/laravel-mix/blob/master/docs/mixjs.md
-  .js("src/js/app.js", "public/js")
+  .js("src/js/app.js", "js")
   // SASS entry file. Uses autoprefixer automatically.
-  .sass("src/css/app.scss", "public/css")
+  .sass("src/css/app.scss", "css")
   // Customize postCSS:
   // https://github.com/JeffreyWay/laravel-mix/blob/master/docs/css-preprocessors.md#postcss-plugins
   .options({
@@ -56,8 +58,6 @@ mix
     // Stops Mix from clearing the console when compilation succeeds
     clearConsole: false
   })
-  // Set public path so manifest gets output here
-  .setPublicPath("public")
   // Add assets to the manifest
   .version(["public/assets"])
   // Reduce noise in Webpack output
@@ -73,7 +73,6 @@ mix
 
 // Full API
 // Docs: https://github.com/JeffreyWay/laravel-mix/tree/master/docs#readme
-// Source: node_modules/laravel-mix/setup/webpack.mix.js
 //
 // mix.js(src, output);
 // mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
